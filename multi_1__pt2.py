# -*- coding: utf-8 -*-
"""Multi_1 _pt2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YcU4INls9oZmlxARArGactbnEjRSRFYE
"""

# 1. Montar Google Drive
from google.colab import drive
drive.mount('/content/drive')

import os
import cv2 #OpenV > Procesamiento de imágenes y video.
import numpy as np #arrays y operaciones vectorizadas
import matplotlib.pyplot as plt #mostrar imágenes y gráficos
import tensorflow as tf #Construir y entrenar redes neuronale
from tensorflow import keras#API de TensorFlow para crear redes neuronales sencillas.
from sklearn.model_selection import train_test_split #Divide arrays o matrices

# 2. Ruta a tus imágenes
image_folder = '/content/drive/MyDrive/shapes'

# 3. Lista de archivos y sus etiquetas
#Los nombres coincidan exactamente con los del archivo en google drive
imagenes = [
    ('imagen13.jpeg', 'Cuadrado'),
    ('imagen16.png', 'Cuadrado'),
    ('imagen12.jpg', 'Circulo'),
    ('imagen14.jpeg', 'Circulo'),
    ('imagen10.jpeg', 'Pentagono'),
    ('imagen15.png', 'Pentagono'),
    ('imagen11.jpeg', 'Hexagono'),
    ('imagen17.png', 'Hexagono'),
]

# 4. Diccionario de clases
clases = {'Circulo': 0, 'Pentagono': 1, 'Hexagono': 2, 'Cuadrado': 3}

# 5. Cargar imágenes y etiquetas
X = []
y = []
#Recorre la lista de imagenes que estan con (nombre, clase)
for filename, label in imagenes:
    ruta = os.path.join(image_folder, filename)
    img = cv2.imread(ruta, cv2.IMREAD_GRAYSCALE)#lee escala de grises
    if img is not None:
        img = cv2.resize(img, (64, 64))#Redimenciona
        img = img / 255.0
        X.append(img)
        y.append(clases[label])#Transofrma etiqueta a numero "Cuadrado" a número (3).
    else:
        print(f"No se pudo leer: {ruta}")

X = np.array(X)[..., np.newaxis]  # convierte en arrays con numpy añande canal B/N (N, 64, 64, 1)
y = np.array(y)

# 6. Dividir en entrenamiento y validación
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.4, stratify=y) #60% entrenamiento, 40% validación.


# 7. Definir modelo CNN (básica para clasificación de imágenes)
model = keras.models.Sequential([
    keras.layers.Conv2D(32, 3, activation='relu', input_shape=(64,64,1)),
    keras.layers.MaxPooling2D(),
    keras.layers.Conv2D(64, 3, activation='relu'),
    keras.layers.MaxPooling2D(),
    keras.layers.Flatten(),
    keras.layers.Dense(64, activation='relu'),
    keras.layers.Dense(4, activation='softmax')
])

#Compila modelo
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.summary()

# 8. Entrenar modelo
history = model.fit(X_train, y_train, epochs=10, validation_data=(X_val, y_val))# 10 épocas.

#funcion para predicir
def predecir_imagen(nombre_archivo):
    ruta = os.path.join(image_folder, nombre_archivo)
    img = cv2.imread(ruta, cv2.IMREAD_GRAYSCALE)
    img = cv2.resize(img, (64, 64))
    img = img / 255.0
    img = img[np.newaxis, ..., np.newaxis]
    pred = model.predict(img)
    clase = list(clases.keys())[np.argmax(pred)]
    plt.imshow(img[0,...,0], cmap='gray')
    plt.title(f"Predicción: {clase}")
    plt.axis("off")
    plt.show()

# Ejemplo
predecir_imagen('imagen10.jpeg')